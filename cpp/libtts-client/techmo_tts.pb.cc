// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: techmo_tts.proto

#include "techmo_tts.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_techmo_5ftts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioConfig_techmo_5ftts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_techmo_5ftts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioData_techmo_5ftts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_techmo_5ftts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SynthesizeConfig_techmo_5ftts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_techmo_5ftts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Voice_techmo_5ftts_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_techmo_5ftts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VoiceInfo_techmo_5ftts_2eproto;
namespace techmo {
namespace tts {
namespace grpc_api {
class ListVoicesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListVoicesRequest> _instance;
} _ListVoicesRequest_default_instance_;
class ListVoicesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListVoicesResponse> _instance;
} _ListVoicesResponse_default_instance_;
class SynthesizeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SynthesizeRequest> _instance;
} _SynthesizeRequest_default_instance_;
class SynthesizeConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SynthesizeConfig> _instance;
} _SynthesizeConfig_default_instance_;
class AudioConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioConfig> _instance;
} _AudioConfig_default_instance_;
class VoiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Voice> _instance;
} _Voice_default_instance_;
class VoiceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoiceInfo> _instance;
} _VoiceInfo_default_instance_;
class SynthesizeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SynthesizeResponse> _instance;
} _SynthesizeResponse_default_instance_;
class AudioDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AudioData> _instance;
} _AudioData_default_instance_;
class PutLexiconRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutLexiconRequest> _instance;
} _PutLexiconRequest_default_instance_;
class PutLexiconResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PutLexiconResponse> _instance;
} _PutLexiconResponse_default_instance_;
class DeleteLexiconRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteLexiconRequest> _instance;
} _DeleteLexiconRequest_default_instance_;
class DeleteLexiconResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteLexiconResponse> _instance;
} _DeleteLexiconResponse_default_instance_;
class GetLexiconRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLexiconRequest> _instance;
} _GetLexiconRequest_default_instance_;
class GetLexiconResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLexiconResponse> _instance;
} _GetLexiconResponse_default_instance_;
class ListLexiconsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListLexiconsRequest> _instance;
} _ListLexiconsRequest_default_instance_;
class ListLexiconsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListLexiconsResponse> _instance;
} _ListLexiconsResponse_default_instance_;
}  // namespace grpc_api
}  // namespace tts
}  // namespace techmo
static void InitDefaultsscc_info_AudioConfig_techmo_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tts::grpc_api::_AudioConfig_default_instance_;
    new (ptr) ::techmo::tts::grpc_api::AudioConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tts::grpc_api::AudioConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioConfig_techmo_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioConfig_techmo_5ftts_2eproto}, {}};

static void InitDefaultsscc_info_AudioData_techmo_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tts::grpc_api::_AudioData_default_instance_;
    new (ptr) ::techmo::tts::grpc_api::AudioData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tts::grpc_api::AudioData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AudioData_techmo_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AudioData_techmo_5ftts_2eproto}, {}};

static void InitDefaultsscc_info_DeleteLexiconRequest_techmo_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tts::grpc_api::_DeleteLexiconRequest_default_instance_;
    new (ptr) ::techmo::tts::grpc_api::DeleteLexiconRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tts::grpc_api::DeleteLexiconRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteLexiconRequest_techmo_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteLexiconRequest_techmo_5ftts_2eproto}, {}};

static void InitDefaultsscc_info_DeleteLexiconResponse_techmo_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tts::grpc_api::_DeleteLexiconResponse_default_instance_;
    new (ptr) ::techmo::tts::grpc_api::DeleteLexiconResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tts::grpc_api::DeleteLexiconResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteLexiconResponse_techmo_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteLexiconResponse_techmo_5ftts_2eproto}, {}};

static void InitDefaultsscc_info_GetLexiconRequest_techmo_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tts::grpc_api::_GetLexiconRequest_default_instance_;
    new (ptr) ::techmo::tts::grpc_api::GetLexiconRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tts::grpc_api::GetLexiconRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLexiconRequest_techmo_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLexiconRequest_techmo_5ftts_2eproto}, {}};

static void InitDefaultsscc_info_GetLexiconResponse_techmo_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tts::grpc_api::_GetLexiconResponse_default_instance_;
    new (ptr) ::techmo::tts::grpc_api::GetLexiconResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tts::grpc_api::GetLexiconResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLexiconResponse_techmo_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLexiconResponse_techmo_5ftts_2eproto}, {}};

static void InitDefaultsscc_info_ListLexiconsRequest_techmo_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tts::grpc_api::_ListLexiconsRequest_default_instance_;
    new (ptr) ::techmo::tts::grpc_api::ListLexiconsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tts::grpc_api::ListLexiconsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListLexiconsRequest_techmo_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListLexiconsRequest_techmo_5ftts_2eproto}, {}};

static void InitDefaultsscc_info_ListLexiconsResponse_techmo_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tts::grpc_api::_ListLexiconsResponse_default_instance_;
    new (ptr) ::techmo::tts::grpc_api::ListLexiconsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tts::grpc_api::ListLexiconsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListLexiconsResponse_techmo_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListLexiconsResponse_techmo_5ftts_2eproto}, {}};

static void InitDefaultsscc_info_ListVoicesRequest_techmo_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tts::grpc_api::_ListVoicesRequest_default_instance_;
    new (ptr) ::techmo::tts::grpc_api::ListVoicesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tts::grpc_api::ListVoicesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListVoicesRequest_techmo_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListVoicesRequest_techmo_5ftts_2eproto}, {}};

static void InitDefaultsscc_info_ListVoicesResponse_techmo_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tts::grpc_api::_ListVoicesResponse_default_instance_;
    new (ptr) ::techmo::tts::grpc_api::ListVoicesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tts::grpc_api::ListVoicesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListVoicesResponse_techmo_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListVoicesResponse_techmo_5ftts_2eproto}, {
      &scc_info_VoiceInfo_techmo_5ftts_2eproto.base,}};

static void InitDefaultsscc_info_PutLexiconRequest_techmo_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tts::grpc_api::_PutLexiconRequest_default_instance_;
    new (ptr) ::techmo::tts::grpc_api::PutLexiconRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tts::grpc_api::PutLexiconRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PutLexiconRequest_techmo_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PutLexiconRequest_techmo_5ftts_2eproto}, {}};

static void InitDefaultsscc_info_PutLexiconResponse_techmo_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tts::grpc_api::_PutLexiconResponse_default_instance_;
    new (ptr) ::techmo::tts::grpc_api::PutLexiconResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tts::grpc_api::PutLexiconResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PutLexiconResponse_techmo_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PutLexiconResponse_techmo_5ftts_2eproto}, {}};

static void InitDefaultsscc_info_SynthesizeConfig_techmo_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tts::grpc_api::_SynthesizeConfig_default_instance_;
    new (ptr) ::techmo::tts::grpc_api::SynthesizeConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tts::grpc_api::SynthesizeConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SynthesizeConfig_techmo_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SynthesizeConfig_techmo_5ftts_2eproto}, {
      &scc_info_AudioConfig_techmo_5ftts_2eproto.base,
      &scc_info_Voice_techmo_5ftts_2eproto.base,}};

static void InitDefaultsscc_info_SynthesizeRequest_techmo_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tts::grpc_api::_SynthesizeRequest_default_instance_;
    new (ptr) ::techmo::tts::grpc_api::SynthesizeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tts::grpc_api::SynthesizeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SynthesizeRequest_techmo_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SynthesizeRequest_techmo_5ftts_2eproto}, {
      &scc_info_SynthesizeConfig_techmo_5ftts_2eproto.base,}};

static void InitDefaultsscc_info_SynthesizeResponse_techmo_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tts::grpc_api::_SynthesizeResponse_default_instance_;
    new (ptr) ::techmo::tts::grpc_api::SynthesizeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tts::grpc_api::SynthesizeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SynthesizeResponse_techmo_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SynthesizeResponse_techmo_5ftts_2eproto}, {
      &scc_info_AudioData_techmo_5ftts_2eproto.base,}};

static void InitDefaultsscc_info_Voice_techmo_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tts::grpc_api::_Voice_default_instance_;
    new (ptr) ::techmo::tts::grpc_api::Voice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tts::grpc_api::Voice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Voice_techmo_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Voice_techmo_5ftts_2eproto}, {}};

static void InitDefaultsscc_info_VoiceInfo_techmo_5ftts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::techmo::tts::grpc_api::_VoiceInfo_default_instance_;
    new (ptr) ::techmo::tts::grpc_api::VoiceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::techmo::tts::grpc_api::VoiceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VoiceInfo_techmo_5ftts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VoiceInfo_techmo_5ftts_2eproto}, {
      &scc_info_Voice_techmo_5ftts_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_techmo_5ftts_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_techmo_5ftts_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_techmo_5ftts_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_techmo_5ftts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::ListVoicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::ListVoicesRequest, language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::ListVoicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::ListVoicesResponse, voices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::SynthesizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::SynthesizeRequest, text_),
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::SynthesizeRequest, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::SynthesizeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::SynthesizeConfig, language_),
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::SynthesizeConfig, audio_config_),
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::SynthesizeConfig, voice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::AudioConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::AudioConfig, audio_encoding_),
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::AudioConfig, sample_rate_hertz_),
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::AudioConfig, pitch_),
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::AudioConfig, range_),
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::AudioConfig, rate_),
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::AudioConfig, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::Voice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::Voice, name_),
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::Voice, gender_),
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::Voice, age_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::VoiceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::VoiceInfo, supported_languages_),
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::VoiceInfo, voice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::SynthesizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::SynthesizeResponse, audio_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::AudioData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::AudioData, sample_rate_hertz_),
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::AudioData, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::PutLexiconRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::PutLexiconRequest, name_),
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::PutLexiconRequest, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::PutLexiconResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::DeleteLexiconRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::DeleteLexiconRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::DeleteLexiconResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::GetLexiconRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::GetLexiconRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::GetLexiconResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::GetLexiconResponse, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::ListLexiconsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::ListLexiconsRequest, language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::ListLexiconsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::techmo::tts::grpc_api::ListLexiconsResponse, names_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::techmo::tts::grpc_api::ListVoicesRequest)},
  { 6, -1, sizeof(::techmo::tts::grpc_api::ListVoicesResponse)},
  { 12, -1, sizeof(::techmo::tts::grpc_api::SynthesizeRequest)},
  { 19, -1, sizeof(::techmo::tts::grpc_api::SynthesizeConfig)},
  { 27, -1, sizeof(::techmo::tts::grpc_api::AudioConfig)},
  { 38, -1, sizeof(::techmo::tts::grpc_api::Voice)},
  { 46, -1, sizeof(::techmo::tts::grpc_api::VoiceInfo)},
  { 53, -1, sizeof(::techmo::tts::grpc_api::SynthesizeResponse)},
  { 59, -1, sizeof(::techmo::tts::grpc_api::AudioData)},
  { 66, -1, sizeof(::techmo::tts::grpc_api::PutLexiconRequest)},
  { 73, -1, sizeof(::techmo::tts::grpc_api::PutLexiconResponse)},
  { 78, -1, sizeof(::techmo::tts::grpc_api::DeleteLexiconRequest)},
  { 84, -1, sizeof(::techmo::tts::grpc_api::DeleteLexiconResponse)},
  { 89, -1, sizeof(::techmo::tts::grpc_api::GetLexiconRequest)},
  { 95, -1, sizeof(::techmo::tts::grpc_api::GetLexiconResponse)},
  { 101, -1, sizeof(::techmo::tts::grpc_api::ListLexiconsRequest)},
  { 107, -1, sizeof(::techmo::tts::grpc_api::ListLexiconsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tts::grpc_api::_ListVoicesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tts::grpc_api::_ListVoicesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tts::grpc_api::_SynthesizeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tts::grpc_api::_SynthesizeConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tts::grpc_api::_AudioConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tts::grpc_api::_Voice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tts::grpc_api::_VoiceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tts::grpc_api::_SynthesizeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tts::grpc_api::_AudioData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tts::grpc_api::_PutLexiconRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tts::grpc_api::_PutLexiconResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tts::grpc_api::_DeleteLexiconRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tts::grpc_api::_DeleteLexiconResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tts::grpc_api::_GetLexiconRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tts::grpc_api::_GetLexiconResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tts::grpc_api::_ListLexiconsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::techmo::tts::grpc_api::_ListLexiconsResponse_default_instance_),
};

const char descriptor_table_protodef_techmo_5ftts_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020techmo_tts.proto\022\023techmo.tts.grpc_api\""
  "%\n\021ListVoicesRequest\022\020\n\010language\030\001 \001(\t\"D"
  "\n\022ListVoicesResponse\022.\n\006voices\030\001 \003(\0132\036.t"
  "echmo.tts.grpc_api.VoiceInfo\"X\n\021Synthesi"
  "zeRequest\022\014\n\004text\030\001 \001(\t\0225\n\006config\030\002 \001(\0132"
  "%.techmo.tts.grpc_api.SynthesizeConfig\"\207"
  "\001\n\020SynthesizeConfig\022\020\n\010language\030\001 \001(\t\0226\n"
  "\014audio_config\030\002 \001(\0132 .techmo.tts.grpc_ap"
  "i.AudioConfig\022)\n\005voice\030\003 \001(\0132\032.techmo.tt"
  "s.grpc_api.Voice\"\240\001\n\013AudioConfig\022:\n\016audi"
  "o_encoding\030\001 \001(\0162\".techmo.tts.grpc_api.A"
  "udioEncoding\022\031\n\021sample_rate_hertz\030\002 \001(\005\022"
  "\r\n\005pitch\030\003 \001(\002\022\r\n\005range\030\004 \001(\002\022\014\n\004rate\030\005 "
  "\001(\002\022\016\n\006volume\030\006 \001(\002\"i\n\005Voice\022\014\n\004name\030\001 \001"
  "(\t\022+\n\006gender\030\002 \001(\0162\033.techmo.tts.grpc_api"
  ".Gender\022%\n\003age\030\003 \001(\0162\030.techmo.tts.grpc_a"
  "pi.Age\"S\n\tVoiceInfo\022\033\n\023supported_languag"
  "es\030\001 \003(\t\022)\n\005voice\030\002 \001(\0132\032.techmo.tts.grp"
  "c_api.Voice\"C\n\022SynthesizeResponse\022-\n\005aud"
  "io\030\001 \001(\0132\036.techmo.tts.grpc_api.AudioData"
  "\"7\n\tAudioData\022\031\n\021sample_rate_hertz\030\001 \001(\005"
  "\022\017\n\007content\030\002 \001(\014\"2\n\021PutLexiconRequest\022\014"
  "\n\004name\030\001 \001(\t\022\017\n\007content\030\002 \001(\t\"\024\n\022PutLexi"
  "conResponse\"$\n\024DeleteLexiconRequest\022\014\n\004n"
  "ame\030\001 \001(\t\"\027\n\025DeleteLexiconResponse\"!\n\021Ge"
  "tLexiconRequest\022\014\n\004name\030\001 \001(\t\"%\n\022GetLexi"
  "conResponse\022\017\n\007content\030\001 \001(\t\"\'\n\023ListLexi"
  "consRequest\022\020\n\010language\030\001 \001(\t\"%\n\024ListLex"
  "iconsResponse\022\r\n\005names\030\001 \003(\t**\n\rAudioEnc"
  "oding\022\t\n\005PCM16\020\000\022\016\n\nOGG_VORBIS\020\001*6\n\006Gend"
  "er\022\026\n\022GENDER_UNSPECIFIED\020\000\022\n\n\006FEMALE\020\001\022\010"
  "\n\004MALE\020\002*<\n\003Age\022\023\n\017AGE_UNSPECIFIED\020\000\022\t\n\005"
  "ADULT\020\001\022\t\n\005CHILD\020\002\022\n\n\006SENILE\020\0032\270\005\n\003TTS\022]"
  "\n\nListVoices\022&.techmo.tts.grpc_api.ListV"
  "oicesRequest\032\'.techmo.tts.grpc_api.ListV"
  "oicesResponse\022h\n\023SynthesizeStreaming\022&.t"
  "echmo.tts.grpc_api.SynthesizeRequest\032\'.t"
  "echmo.tts.grpc_api.SynthesizeResponse0\001\022"
  "]\n\nSynthesize\022&.techmo.tts.grpc_api.Synt"
  "hesizeRequest\032\'.techmo.tts.grpc_api.Synt"
  "hesizeResponse\022]\n\nPutLexicon\022&.techmo.tt"
  "s.grpc_api.PutLexiconRequest\032\'.techmo.tt"
  "s.grpc_api.PutLexiconResponse\022f\n\rDeleteL"
  "exicon\022).techmo.tts.grpc_api.DeleteLexic"
  "onRequest\032*.techmo.tts.grpc_api.DeleteLe"
  "xiconResponse\022]\n\nGetLexicon\022&.techmo.tts"
  ".grpc_api.GetLexiconRequest\032\'.techmo.tts"
  ".grpc_api.GetLexiconResponse\022c\n\014ListLexi"
  "cons\022(.techmo.tts.grpc_api.ListLexiconsR"
  "equest\032).techmo.tts.grpc_api.ListLexicon"
  "sResponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_techmo_5ftts_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_techmo_5ftts_2eproto_sccs[17] = {
  &scc_info_AudioConfig_techmo_5ftts_2eproto.base,
  &scc_info_AudioData_techmo_5ftts_2eproto.base,
  &scc_info_DeleteLexiconRequest_techmo_5ftts_2eproto.base,
  &scc_info_DeleteLexiconResponse_techmo_5ftts_2eproto.base,
  &scc_info_GetLexiconRequest_techmo_5ftts_2eproto.base,
  &scc_info_GetLexiconResponse_techmo_5ftts_2eproto.base,
  &scc_info_ListLexiconsRequest_techmo_5ftts_2eproto.base,
  &scc_info_ListLexiconsResponse_techmo_5ftts_2eproto.base,
  &scc_info_ListVoicesRequest_techmo_5ftts_2eproto.base,
  &scc_info_ListVoicesResponse_techmo_5ftts_2eproto.base,
  &scc_info_PutLexiconRequest_techmo_5ftts_2eproto.base,
  &scc_info_PutLexiconResponse_techmo_5ftts_2eproto.base,
  &scc_info_SynthesizeConfig_techmo_5ftts_2eproto.base,
  &scc_info_SynthesizeRequest_techmo_5ftts_2eproto.base,
  &scc_info_SynthesizeResponse_techmo_5ftts_2eproto.base,
  &scc_info_Voice_techmo_5ftts_2eproto.base,
  &scc_info_VoiceInfo_techmo_5ftts_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_techmo_5ftts_2eproto_once;
static bool descriptor_table_techmo_5ftts_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_techmo_5ftts_2eproto = {
  &descriptor_table_techmo_5ftts_2eproto_initialized, descriptor_table_protodef_techmo_5ftts_2eproto, "techmo_tts.proto", 2017,
  &descriptor_table_techmo_5ftts_2eproto_once, descriptor_table_techmo_5ftts_2eproto_sccs, descriptor_table_techmo_5ftts_2eproto_deps, 17, 0,
  schemas, file_default_instances, TableStruct_techmo_5ftts_2eproto::offsets,
  file_level_metadata_techmo_5ftts_2eproto, 17, file_level_enum_descriptors_techmo_5ftts_2eproto, file_level_service_descriptors_techmo_5ftts_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_techmo_5ftts_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_techmo_5ftts_2eproto), true);
namespace techmo {
namespace tts {
namespace grpc_api {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioEncoding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_techmo_5ftts_2eproto);
  return file_level_enum_descriptors_techmo_5ftts_2eproto[0];
}
bool AudioEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Gender_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_techmo_5ftts_2eproto);
  return file_level_enum_descriptors_techmo_5ftts_2eproto[1];
}
bool Gender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Age_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_techmo_5ftts_2eproto);
  return file_level_enum_descriptors_techmo_5ftts_2eproto[2];
}
bool Age_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ListVoicesRequest::InitAsDefaultInstance() {
}
class ListVoicesRequest::_Internal {
 public:
};

ListVoicesRequest::ListVoicesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tts.grpc_api.ListVoicesRequest)
}
ListVoicesRequest::ListVoicesRequest(const ListVoicesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  // @@protoc_insertion_point(copy_constructor:techmo.tts.grpc_api.ListVoicesRequest)
}

void ListVoicesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListVoicesRequest_techmo_5ftts_2eproto.base);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListVoicesRequest::~ListVoicesRequest() {
  // @@protoc_insertion_point(destructor:techmo.tts.grpc_api.ListVoicesRequest)
  SharedDtor();
}

void ListVoicesRequest::SharedDtor() {
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListVoicesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListVoicesRequest& ListVoicesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListVoicesRequest_techmo_5ftts_2eproto.base);
  return *internal_default_instance();
}


void ListVoicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tts.grpc_api.ListVoicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ListVoicesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "techmo.tts.grpc_api.ListVoicesRequest.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListVoicesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tts.grpc_api.ListVoicesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language = 1;
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tts.grpc_api.ListVoicesRequest.language");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tts.grpc_api.ListVoicesRequest)
  return target;
}

size_t ListVoicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tts.grpc_api.ListVoicesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string language = 1;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVoicesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tts.grpc_api.ListVoicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVoicesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListVoicesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tts.grpc_api.ListVoicesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tts.grpc_api.ListVoicesRequest)
    MergeFrom(*source);
  }
}

void ListVoicesRequest::MergeFrom(const ListVoicesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tts.grpc_api.ListVoicesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
}

void ListVoicesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tts.grpc_api.ListVoicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVoicesRequest::CopyFrom(const ListVoicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tts.grpc_api.ListVoicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVoicesRequest::IsInitialized() const {
  return true;
}

void ListVoicesRequest::InternalSwap(ListVoicesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVoicesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListVoicesResponse::InitAsDefaultInstance() {
}
class ListVoicesResponse::_Internal {
 public:
};

ListVoicesResponse::ListVoicesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tts.grpc_api.ListVoicesResponse)
}
ListVoicesResponse::ListVoicesResponse(const ListVoicesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      voices_(from.voices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:techmo.tts.grpc_api.ListVoicesResponse)
}

void ListVoicesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListVoicesResponse_techmo_5ftts_2eproto.base);
}

ListVoicesResponse::~ListVoicesResponse() {
  // @@protoc_insertion_point(destructor:techmo.tts.grpc_api.ListVoicesResponse)
  SharedDtor();
}

void ListVoicesResponse::SharedDtor() {
}

void ListVoicesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListVoicesResponse& ListVoicesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListVoicesResponse_techmo_5ftts_2eproto.base);
  return *internal_default_instance();
}


void ListVoicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tts.grpc_api.ListVoicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  voices_.Clear();
  _internal_metadata_.Clear();
}

const char* ListVoicesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .techmo.tts.grpc_api.VoiceInfo voices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_voices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListVoicesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tts.grpc_api.ListVoicesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .techmo.tts.grpc_api.VoiceInfo voices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_voices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_voices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tts.grpc_api.ListVoicesResponse)
  return target;
}

size_t ListVoicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tts.grpc_api.ListVoicesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .techmo.tts.grpc_api.VoiceInfo voices = 1;
  total_size += 1UL * this->_internal_voices_size();
  for (const auto& msg : this->voices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListVoicesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tts.grpc_api.ListVoicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListVoicesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListVoicesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tts.grpc_api.ListVoicesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tts.grpc_api.ListVoicesResponse)
    MergeFrom(*source);
  }
}

void ListVoicesResponse::MergeFrom(const ListVoicesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tts.grpc_api.ListVoicesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  voices_.MergeFrom(from.voices_);
}

void ListVoicesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tts.grpc_api.ListVoicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListVoicesResponse::CopyFrom(const ListVoicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tts.grpc_api.ListVoicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListVoicesResponse::IsInitialized() const {
  return true;
}

void ListVoicesResponse::InternalSwap(ListVoicesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  voices_.InternalSwap(&other->voices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListVoicesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SynthesizeRequest::InitAsDefaultInstance() {
  ::techmo::tts::grpc_api::_SynthesizeRequest_default_instance_._instance.get_mutable()->config_ = const_cast< ::techmo::tts::grpc_api::SynthesizeConfig*>(
      ::techmo::tts::grpc_api::SynthesizeConfig::internal_default_instance());
}
class SynthesizeRequest::_Internal {
 public:
  static const ::techmo::tts::grpc_api::SynthesizeConfig& config(const SynthesizeRequest* msg);
};

const ::techmo::tts::grpc_api::SynthesizeConfig&
SynthesizeRequest::_Internal::config(const SynthesizeRequest* msg) {
  return *msg->config_;
}
SynthesizeRequest::SynthesizeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tts.grpc_api.SynthesizeRequest)
}
SynthesizeRequest::SynthesizeRequest(const SynthesizeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from._internal_has_config()) {
    config_ = new ::techmo::tts::grpc_api::SynthesizeConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:techmo.tts.grpc_api.SynthesizeRequest)
}

void SynthesizeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SynthesizeRequest_techmo_5ftts_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  config_ = nullptr;
}

SynthesizeRequest::~SynthesizeRequest() {
  // @@protoc_insertion_point(destructor:techmo.tts.grpc_api.SynthesizeRequest)
  SharedDtor();
}

void SynthesizeRequest::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
}

void SynthesizeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SynthesizeRequest& SynthesizeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SynthesizeRequest_techmo_5ftts_2eproto.base);
  return *internal_default_instance();
}


void SynthesizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tts.grpc_api.SynthesizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SynthesizeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "techmo.tts.grpc_api.SynthesizeRequest.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .techmo.tts.grpc_api.SynthesizeConfig config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SynthesizeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tts.grpc_api.SynthesizeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tts.grpc_api.SynthesizeRequest.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // .techmo.tts.grpc_api.SynthesizeConfig config = 2;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tts.grpc_api.SynthesizeRequest)
  return target;
}

size_t SynthesizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tts.grpc_api.SynthesizeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // .techmo.tts.grpc_api.SynthesizeConfig config = 2;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SynthesizeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tts.grpc_api.SynthesizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SynthesizeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SynthesizeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tts.grpc_api.SynthesizeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tts.grpc_api.SynthesizeRequest)
    MergeFrom(*source);
  }
}

void SynthesizeRequest::MergeFrom(const SynthesizeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tts.grpc_api.SynthesizeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_config()) {
    _internal_mutable_config()->::techmo::tts::grpc_api::SynthesizeConfig::MergeFrom(from._internal_config());
  }
}

void SynthesizeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tts.grpc_api.SynthesizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynthesizeRequest::CopyFrom(const SynthesizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tts.grpc_api.SynthesizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynthesizeRequest::IsInitialized() const {
  return true;
}

void SynthesizeRequest::InternalSwap(SynthesizeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(config_, other->config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SynthesizeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SynthesizeConfig::InitAsDefaultInstance() {
  ::techmo::tts::grpc_api::_SynthesizeConfig_default_instance_._instance.get_mutable()->audio_config_ = const_cast< ::techmo::tts::grpc_api::AudioConfig*>(
      ::techmo::tts::grpc_api::AudioConfig::internal_default_instance());
  ::techmo::tts::grpc_api::_SynthesizeConfig_default_instance_._instance.get_mutable()->voice_ = const_cast< ::techmo::tts::grpc_api::Voice*>(
      ::techmo::tts::grpc_api::Voice::internal_default_instance());
}
class SynthesizeConfig::_Internal {
 public:
  static const ::techmo::tts::grpc_api::AudioConfig& audio_config(const SynthesizeConfig* msg);
  static const ::techmo::tts::grpc_api::Voice& voice(const SynthesizeConfig* msg);
};

const ::techmo::tts::grpc_api::AudioConfig&
SynthesizeConfig::_Internal::audio_config(const SynthesizeConfig* msg) {
  return *msg->audio_config_;
}
const ::techmo::tts::grpc_api::Voice&
SynthesizeConfig::_Internal::voice(const SynthesizeConfig* msg) {
  return *msg->voice_;
}
SynthesizeConfig::SynthesizeConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tts.grpc_api.SynthesizeConfig)
}
SynthesizeConfig::SynthesizeConfig(const SynthesizeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from._internal_has_audio_config()) {
    audio_config_ = new ::techmo::tts::grpc_api::AudioConfig(*from.audio_config_);
  } else {
    audio_config_ = nullptr;
  }
  if (from._internal_has_voice()) {
    voice_ = new ::techmo::tts::grpc_api::Voice(*from.voice_);
  } else {
    voice_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:techmo.tts.grpc_api.SynthesizeConfig)
}

void SynthesizeConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SynthesizeConfig_techmo_5ftts_2eproto.base);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&audio_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&voice_) -
      reinterpret_cast<char*>(&audio_config_)) + sizeof(voice_));
}

SynthesizeConfig::~SynthesizeConfig() {
  // @@protoc_insertion_point(destructor:techmo.tts.grpc_api.SynthesizeConfig)
  SharedDtor();
}

void SynthesizeConfig::SharedDtor() {
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete audio_config_;
  if (this != internal_default_instance()) delete voice_;
}

void SynthesizeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SynthesizeConfig& SynthesizeConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SynthesizeConfig_techmo_5ftts_2eproto.base);
  return *internal_default_instance();
}


void SynthesizeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tts.grpc_api.SynthesizeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && audio_config_ != nullptr) {
    delete audio_config_;
  }
  audio_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && voice_ != nullptr) {
    delete voice_;
  }
  voice_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SynthesizeConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "techmo.tts.grpc_api.SynthesizeConfig.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .techmo.tts.grpc_api.AudioConfig audio_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .techmo.tts.grpc_api.Voice voice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_voice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SynthesizeConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tts.grpc_api.SynthesizeConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language = 1;
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tts.grpc_api.SynthesizeConfig.language");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language(), target);
  }

  // .techmo.tts.grpc_api.AudioConfig audio_config = 2;
  if (this->has_audio_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::audio_config(this), target, stream);
  }

  // .techmo.tts.grpc_api.Voice voice = 3;
  if (this->has_voice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::voice(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tts.grpc_api.SynthesizeConfig)
  return target;
}

size_t SynthesizeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tts.grpc_api.SynthesizeConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string language = 1;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  // .techmo.tts.grpc_api.AudioConfig audio_config = 2;
  if (this->has_audio_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_config_);
  }

  // .techmo.tts.grpc_api.Voice voice = 3;
  if (this->has_voice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voice_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SynthesizeConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tts.grpc_api.SynthesizeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SynthesizeConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SynthesizeConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tts.grpc_api.SynthesizeConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tts.grpc_api.SynthesizeConfig)
    MergeFrom(*source);
  }
}

void SynthesizeConfig::MergeFrom(const SynthesizeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tts.grpc_api.SynthesizeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  if (from.has_audio_config()) {
    _internal_mutable_audio_config()->::techmo::tts::grpc_api::AudioConfig::MergeFrom(from._internal_audio_config());
  }
  if (from.has_voice()) {
    _internal_mutable_voice()->::techmo::tts::grpc_api::Voice::MergeFrom(from._internal_voice());
  }
}

void SynthesizeConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tts.grpc_api.SynthesizeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynthesizeConfig::CopyFrom(const SynthesizeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tts.grpc_api.SynthesizeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynthesizeConfig::IsInitialized() const {
  return true;
}

void SynthesizeConfig::InternalSwap(SynthesizeConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(audio_config_, other->audio_config_);
  swap(voice_, other->voice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SynthesizeConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioConfig::InitAsDefaultInstance() {
}
class AudioConfig::_Internal {
 public:
};

AudioConfig::AudioConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tts.grpc_api.AudioConfig)
}
AudioConfig::AudioConfig(const AudioConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&audio_encoding_, &from.audio_encoding_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&audio_encoding_)) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:techmo.tts.grpc_api.AudioConfig)
}

void AudioConfig::SharedCtor() {
  ::memset(&audio_encoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&audio_encoding_)) + sizeof(volume_));
}

AudioConfig::~AudioConfig() {
  // @@protoc_insertion_point(destructor:techmo.tts.grpc_api.AudioConfig)
  SharedDtor();
}

void AudioConfig::SharedDtor() {
}

void AudioConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioConfig& AudioConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioConfig_techmo_5ftts_2eproto.base);
  return *internal_default_instance();
}


void AudioConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tts.grpc_api.AudioConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&audio_encoding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&audio_encoding_)) + sizeof(volume_));
  _internal_metadata_.Clear();
}

const char* AudioConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .techmo.tts.grpc_api.AudioEncoding audio_encoding = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_audio_encoding(static_cast<::techmo::tts::grpc_api::AudioEncoding>(val));
        } else goto handle_unusual;
        continue;
      // int32 sample_rate_hertz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sample_rate_hertz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pitch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tts.grpc_api.AudioConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.tts.grpc_api.AudioEncoding audio_encoding = 1;
  if (this->audio_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_audio_encoding(), target);
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sample_rate_hertz(), target);
  }

  // float pitch = 3;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pitch(), target);
  }

  // float range = 4;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_range(), target);
  }

  // float rate = 5;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_rate(), target);
  }

  // float volume = 6;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tts.grpc_api.AudioConfig)
  return target;
}

size_t AudioConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tts.grpc_api.AudioConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .techmo.tts.grpc_api.AudioEncoding audio_encoding = 1;
  if (this->audio_encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_audio_encoding());
  }

  // int32 sample_rate_hertz = 2;
  if (this->sample_rate_hertz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sample_rate_hertz());
  }

  // float pitch = 3;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 4;
  }

  // float range = 4;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    total_size += 1 + 4;
  }

  // float rate = 5;
  if (!(this->rate() <= 0 && this->rate() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume = 6;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tts.grpc_api.AudioConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tts.grpc_api.AudioConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tts.grpc_api.AudioConfig)
    MergeFrom(*source);
  }
}

void AudioConfig::MergeFrom(const AudioConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tts.grpc_api.AudioConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.audio_encoding() != 0) {
    _internal_set_audio_encoding(from._internal_audio_encoding());
  }
  if (from.sample_rate_hertz() != 0) {
    _internal_set_sample_rate_hertz(from._internal_sample_rate_hertz());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    _internal_set_pitch(from._internal_pitch());
  }
  if (!(from.range() <= 0 && from.range() >= 0)) {
    _internal_set_range(from._internal_range());
  }
  if (!(from.rate() <= 0 && from.rate() >= 0)) {
    _internal_set_rate(from._internal_rate());
  }
  if (!(from.volume() <= 0 && from.volume() >= 0)) {
    _internal_set_volume(from._internal_volume());
  }
}

void AudioConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tts.grpc_api.AudioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioConfig::CopyFrom(const AudioConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tts.grpc_api.AudioConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioConfig::IsInitialized() const {
  return true;
}

void AudioConfig::InternalSwap(AudioConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(audio_encoding_, other->audio_encoding_);
  swap(sample_rate_hertz_, other->sample_rate_hertz_);
  swap(pitch_, other->pitch_);
  swap(range_, other->range_);
  swap(rate_, other->rate_);
  swap(volume_, other->volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Voice::InitAsDefaultInstance() {
}
class Voice::_Internal {
 public:
};

Voice::Voice()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tts.grpc_api.Voice)
}
Voice::Voice(const Voice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&gender_, &from.gender_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&gender_)) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:techmo.tts.grpc_api.Voice)
}

void Voice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Voice_techmo_5ftts_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&gender_)) + sizeof(age_));
}

Voice::~Voice() {
  // @@protoc_insertion_point(destructor:techmo.tts.grpc_api.Voice)
  SharedDtor();
}

void Voice::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Voice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Voice& Voice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Voice_techmo_5ftts_2eproto.base);
  return *internal_default_instance();
}


void Voice::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tts.grpc_api.Voice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&gender_)) + sizeof(age_));
  _internal_metadata_.Clear();
}

const char* Voice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "techmo.tts.grpc_api.Voice.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .techmo.tts.grpc_api.Gender gender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_gender(static_cast<::techmo::tts::grpc_api::Gender>(val));
        } else goto handle_unusual;
        continue;
      // .techmo.tts.grpc_api.Age age = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_age(static_cast<::techmo::tts::grpc_api::Age>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Voice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tts.grpc_api.Voice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tts.grpc_api.Voice.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .techmo.tts.grpc_api.Gender gender = 2;
  if (this->gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gender(), target);
  }

  // .techmo.tts.grpc_api.Age age = 3;
  if (this->age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_age(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tts.grpc_api.Voice)
  return target;
}

size_t Voice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tts.grpc_api.Voice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .techmo.tts.grpc_api.Gender gender = 2;
  if (this->gender() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gender());
  }

  // .techmo.tts.grpc_api.Age age = 3;
  if (this->age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_age());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Voice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tts.grpc_api.Voice)
  GOOGLE_DCHECK_NE(&from, this);
  const Voice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Voice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tts.grpc_api.Voice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tts.grpc_api.Voice)
    MergeFrom(*source);
  }
}

void Voice::MergeFrom(const Voice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tts.grpc_api.Voice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
  if (from.age() != 0) {
    _internal_set_age(from._internal_age());
  }
}

void Voice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tts.grpc_api.Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Voice::CopyFrom(const Voice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tts.grpc_api.Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Voice::IsInitialized() const {
  return true;
}

void Voice::InternalSwap(Voice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(gender_, other->gender_);
  swap(age_, other->age_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Voice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VoiceInfo::InitAsDefaultInstance() {
  ::techmo::tts::grpc_api::_VoiceInfo_default_instance_._instance.get_mutable()->voice_ = const_cast< ::techmo::tts::grpc_api::Voice*>(
      ::techmo::tts::grpc_api::Voice::internal_default_instance());
}
class VoiceInfo::_Internal {
 public:
  static const ::techmo::tts::grpc_api::Voice& voice(const VoiceInfo* msg);
};

const ::techmo::tts::grpc_api::Voice&
VoiceInfo::_Internal::voice(const VoiceInfo* msg) {
  return *msg->voice_;
}
VoiceInfo::VoiceInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tts.grpc_api.VoiceInfo)
}
VoiceInfo::VoiceInfo(const VoiceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      supported_languages_(from.supported_languages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_voice()) {
    voice_ = new ::techmo::tts::grpc_api::Voice(*from.voice_);
  } else {
    voice_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:techmo.tts.grpc_api.VoiceInfo)
}

void VoiceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoiceInfo_techmo_5ftts_2eproto.base);
  voice_ = nullptr;
}

VoiceInfo::~VoiceInfo() {
  // @@protoc_insertion_point(destructor:techmo.tts.grpc_api.VoiceInfo)
  SharedDtor();
}

void VoiceInfo::SharedDtor() {
  if (this != internal_default_instance()) delete voice_;
}

void VoiceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoiceInfo& VoiceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoiceInfo_techmo_5ftts_2eproto.base);
  return *internal_default_instance();
}


void VoiceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tts.grpc_api.VoiceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_languages_.Clear();
  if (GetArenaNoVirtual() == nullptr && voice_ != nullptr) {
    delete voice_;
  }
  voice_ = nullptr;
  _internal_metadata_.Clear();
}

const char* VoiceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string supported_languages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_supported_languages();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "techmo.tts.grpc_api.VoiceInfo.supported_languages"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .techmo.tts.grpc_api.Voice voice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_voice(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoiceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tts.grpc_api.VoiceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string supported_languages = 1;
  for (int i = 0, n = this->_internal_supported_languages_size(); i < n; i++) {
    const auto& s = this->_internal_supported_languages(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tts.grpc_api.VoiceInfo.supported_languages");
    target = stream->WriteString(1, s, target);
  }

  // .techmo.tts.grpc_api.Voice voice = 2;
  if (this->has_voice()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::voice(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tts.grpc_api.VoiceInfo)
  return target;
}

size_t VoiceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tts.grpc_api.VoiceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string supported_languages = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(supported_languages_.size());
  for (int i = 0, n = supported_languages_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      supported_languages_.Get(i));
  }

  // .techmo.tts.grpc_api.Voice voice = 2;
  if (this->has_voice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *voice_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoiceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tts.grpc_api.VoiceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VoiceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoiceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tts.grpc_api.VoiceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tts.grpc_api.VoiceInfo)
    MergeFrom(*source);
  }
}

void VoiceInfo::MergeFrom(const VoiceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tts.grpc_api.VoiceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supported_languages_.MergeFrom(from.supported_languages_);
  if (from.has_voice()) {
    _internal_mutable_voice()->::techmo::tts::grpc_api::Voice::MergeFrom(from._internal_voice());
  }
}

void VoiceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tts.grpc_api.VoiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoiceInfo::CopyFrom(const VoiceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tts.grpc_api.VoiceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoiceInfo::IsInitialized() const {
  return true;
}

void VoiceInfo::InternalSwap(VoiceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  supported_languages_.InternalSwap(&other->supported_languages_);
  swap(voice_, other->voice_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoiceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SynthesizeResponse::InitAsDefaultInstance() {
  ::techmo::tts::grpc_api::_SynthesizeResponse_default_instance_._instance.get_mutable()->audio_ = const_cast< ::techmo::tts::grpc_api::AudioData*>(
      ::techmo::tts::grpc_api::AudioData::internal_default_instance());
}
class SynthesizeResponse::_Internal {
 public:
  static const ::techmo::tts::grpc_api::AudioData& audio(const SynthesizeResponse* msg);
};

const ::techmo::tts::grpc_api::AudioData&
SynthesizeResponse::_Internal::audio(const SynthesizeResponse* msg) {
  return *msg->audio_;
}
SynthesizeResponse::SynthesizeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tts.grpc_api.SynthesizeResponse)
}
SynthesizeResponse::SynthesizeResponse(const SynthesizeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_audio()) {
    audio_ = new ::techmo::tts::grpc_api::AudioData(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:techmo.tts.grpc_api.SynthesizeResponse)
}

void SynthesizeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SynthesizeResponse_techmo_5ftts_2eproto.base);
  audio_ = nullptr;
}

SynthesizeResponse::~SynthesizeResponse() {
  // @@protoc_insertion_point(destructor:techmo.tts.grpc_api.SynthesizeResponse)
  SharedDtor();
}

void SynthesizeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete audio_;
}

void SynthesizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SynthesizeResponse& SynthesizeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SynthesizeResponse_techmo_5ftts_2eproto.base);
  return *internal_default_instance();
}


void SynthesizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tts.grpc_api.SynthesizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && audio_ != nullptr) {
    delete audio_;
  }
  audio_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SynthesizeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .techmo.tts.grpc_api.AudioData audio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SynthesizeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tts.grpc_api.SynthesizeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .techmo.tts.grpc_api.AudioData audio = 1;
  if (this->has_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::audio(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tts.grpc_api.SynthesizeResponse)
  return target;
}

size_t SynthesizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tts.grpc_api.SynthesizeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .techmo.tts.grpc_api.AudioData audio = 1;
  if (this->has_audio()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *audio_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SynthesizeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tts.grpc_api.SynthesizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SynthesizeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SynthesizeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tts.grpc_api.SynthesizeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tts.grpc_api.SynthesizeResponse)
    MergeFrom(*source);
  }
}

void SynthesizeResponse::MergeFrom(const SynthesizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tts.grpc_api.SynthesizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_audio()) {
    _internal_mutable_audio()->::techmo::tts::grpc_api::AudioData::MergeFrom(from._internal_audio());
  }
}

void SynthesizeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tts.grpc_api.SynthesizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynthesizeResponse::CopyFrom(const SynthesizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tts.grpc_api.SynthesizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynthesizeResponse::IsInitialized() const {
  return true;
}

void SynthesizeResponse::InternalSwap(SynthesizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(audio_, other->audio_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SynthesizeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AudioData::InitAsDefaultInstance() {
}
class AudioData::_Internal {
 public:
};

AudioData::AudioData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tts.grpc_api.AudioData)
}
AudioData::AudioData(const AudioData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  sample_rate_hertz_ = from.sample_rate_hertz_;
  // @@protoc_insertion_point(copy_constructor:techmo.tts.grpc_api.AudioData)
}

void AudioData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AudioData_techmo_5ftts_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_rate_hertz_ = 0;
}

AudioData::~AudioData() {
  // @@protoc_insertion_point(destructor:techmo.tts.grpc_api.AudioData)
  SharedDtor();
}

void AudioData::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AudioData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AudioData& AudioData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AudioData_techmo_5ftts_2eproto.base);
  return *internal_default_instance();
}


void AudioData::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tts.grpc_api.AudioData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sample_rate_hertz_ = 0;
  _internal_metadata_.Clear();
}

const char* AudioData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 sample_rate_hertz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sample_rate_hertz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tts.grpc_api.AudioData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sample_rate_hertz = 1;
  if (this->sample_rate_hertz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sample_rate_hertz(), target);
  }

  // bytes content = 2;
  if (this->content().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tts.grpc_api.AudioData)
  return target;
}

size_t AudioData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tts.grpc_api.AudioData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  // int32 sample_rate_hertz = 1;
  if (this->sample_rate_hertz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sample_rate_hertz());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AudioData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tts.grpc_api.AudioData)
  GOOGLE_DCHECK_NE(&from, this);
  const AudioData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AudioData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tts.grpc_api.AudioData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tts.grpc_api.AudioData)
    MergeFrom(*source);
  }
}

void AudioData::MergeFrom(const AudioData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tts.grpc_api.AudioData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.sample_rate_hertz() != 0) {
    _internal_set_sample_rate_hertz(from._internal_sample_rate_hertz());
  }
}

void AudioData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tts.grpc_api.AudioData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AudioData::CopyFrom(const AudioData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tts.grpc_api.AudioData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioData::IsInitialized() const {
  return true;
}

void AudioData::InternalSwap(AudioData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sample_rate_hertz_, other->sample_rate_hertz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutLexiconRequest::InitAsDefaultInstance() {
}
class PutLexiconRequest::_Internal {
 public:
};

PutLexiconRequest::PutLexiconRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tts.grpc_api.PutLexiconRequest)
}
PutLexiconRequest::PutLexiconRequest(const PutLexiconRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:techmo.tts.grpc_api.PutLexiconRequest)
}

void PutLexiconRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PutLexiconRequest_techmo_5ftts_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PutLexiconRequest::~PutLexiconRequest() {
  // @@protoc_insertion_point(destructor:techmo.tts.grpc_api.PutLexiconRequest)
  SharedDtor();
}

void PutLexiconRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PutLexiconRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutLexiconRequest& PutLexiconRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutLexiconRequest_techmo_5ftts_2eproto.base);
  return *internal_default_instance();
}


void PutLexiconRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tts.grpc_api.PutLexiconRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PutLexiconRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "techmo.tts.grpc_api.PutLexiconRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "techmo.tts.grpc_api.PutLexiconRequest.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutLexiconRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tts.grpc_api.PutLexiconRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tts.grpc_api.PutLexiconRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string content = 2;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tts.grpc_api.PutLexiconRequest.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tts.grpc_api.PutLexiconRequest)
  return target;
}

size_t PutLexiconRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tts.grpc_api.PutLexiconRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutLexiconRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tts.grpc_api.PutLexiconRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PutLexiconRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutLexiconRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tts.grpc_api.PutLexiconRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tts.grpc_api.PutLexiconRequest)
    MergeFrom(*source);
  }
}

void PutLexiconRequest::MergeFrom(const PutLexiconRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tts.grpc_api.PutLexiconRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void PutLexiconRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tts.grpc_api.PutLexiconRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutLexiconRequest::CopyFrom(const PutLexiconRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tts.grpc_api.PutLexiconRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutLexiconRequest::IsInitialized() const {
  return true;
}

void PutLexiconRequest::InternalSwap(PutLexiconRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PutLexiconRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PutLexiconResponse::InitAsDefaultInstance() {
}
class PutLexiconResponse::_Internal {
 public:
};

PutLexiconResponse::PutLexiconResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tts.grpc_api.PutLexiconResponse)
}
PutLexiconResponse::PutLexiconResponse(const PutLexiconResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:techmo.tts.grpc_api.PutLexiconResponse)
}

void PutLexiconResponse::SharedCtor() {
}

PutLexiconResponse::~PutLexiconResponse() {
  // @@protoc_insertion_point(destructor:techmo.tts.grpc_api.PutLexiconResponse)
  SharedDtor();
}

void PutLexiconResponse::SharedDtor() {
}

void PutLexiconResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PutLexiconResponse& PutLexiconResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PutLexiconResponse_techmo_5ftts_2eproto.base);
  return *internal_default_instance();
}


void PutLexiconResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tts.grpc_api.PutLexiconResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* PutLexiconResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PutLexiconResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tts.grpc_api.PutLexiconResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tts.grpc_api.PutLexiconResponse)
  return target;
}

size_t PutLexiconResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tts.grpc_api.PutLexiconResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PutLexiconResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tts.grpc_api.PutLexiconResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PutLexiconResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PutLexiconResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tts.grpc_api.PutLexiconResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tts.grpc_api.PutLexiconResponse)
    MergeFrom(*source);
  }
}

void PutLexiconResponse::MergeFrom(const PutLexiconResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tts.grpc_api.PutLexiconResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PutLexiconResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tts.grpc_api.PutLexiconResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutLexiconResponse::CopyFrom(const PutLexiconResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tts.grpc_api.PutLexiconResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutLexiconResponse::IsInitialized() const {
  return true;
}

void PutLexiconResponse::InternalSwap(PutLexiconResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PutLexiconResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteLexiconRequest::InitAsDefaultInstance() {
}
class DeleteLexiconRequest::_Internal {
 public:
};

DeleteLexiconRequest::DeleteLexiconRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tts.grpc_api.DeleteLexiconRequest)
}
DeleteLexiconRequest::DeleteLexiconRequest(const DeleteLexiconRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:techmo.tts.grpc_api.DeleteLexiconRequest)
}

void DeleteLexiconRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteLexiconRequest_techmo_5ftts_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteLexiconRequest::~DeleteLexiconRequest() {
  // @@protoc_insertion_point(destructor:techmo.tts.grpc_api.DeleteLexiconRequest)
  SharedDtor();
}

void DeleteLexiconRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteLexiconRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteLexiconRequest& DeleteLexiconRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteLexiconRequest_techmo_5ftts_2eproto.base);
  return *internal_default_instance();
}


void DeleteLexiconRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tts.grpc_api.DeleteLexiconRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DeleteLexiconRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "techmo.tts.grpc_api.DeleteLexiconRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteLexiconRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tts.grpc_api.DeleteLexiconRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tts.grpc_api.DeleteLexiconRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tts.grpc_api.DeleteLexiconRequest)
  return target;
}

size_t DeleteLexiconRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tts.grpc_api.DeleteLexiconRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteLexiconRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tts.grpc_api.DeleteLexiconRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteLexiconRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteLexiconRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tts.grpc_api.DeleteLexiconRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tts.grpc_api.DeleteLexiconRequest)
    MergeFrom(*source);
  }
}

void DeleteLexiconRequest::MergeFrom(const DeleteLexiconRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tts.grpc_api.DeleteLexiconRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DeleteLexiconRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tts.grpc_api.DeleteLexiconRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteLexiconRequest::CopyFrom(const DeleteLexiconRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tts.grpc_api.DeleteLexiconRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteLexiconRequest::IsInitialized() const {
  return true;
}

void DeleteLexiconRequest::InternalSwap(DeleteLexiconRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteLexiconRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteLexiconResponse::InitAsDefaultInstance() {
}
class DeleteLexiconResponse::_Internal {
 public:
};

DeleteLexiconResponse::DeleteLexiconResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tts.grpc_api.DeleteLexiconResponse)
}
DeleteLexiconResponse::DeleteLexiconResponse(const DeleteLexiconResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:techmo.tts.grpc_api.DeleteLexiconResponse)
}

void DeleteLexiconResponse::SharedCtor() {
}

DeleteLexiconResponse::~DeleteLexiconResponse() {
  // @@protoc_insertion_point(destructor:techmo.tts.grpc_api.DeleteLexiconResponse)
  SharedDtor();
}

void DeleteLexiconResponse::SharedDtor() {
}

void DeleteLexiconResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteLexiconResponse& DeleteLexiconResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteLexiconResponse_techmo_5ftts_2eproto.base);
  return *internal_default_instance();
}


void DeleteLexiconResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tts.grpc_api.DeleteLexiconResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* DeleteLexiconResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteLexiconResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tts.grpc_api.DeleteLexiconResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tts.grpc_api.DeleteLexiconResponse)
  return target;
}

size_t DeleteLexiconResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tts.grpc_api.DeleteLexiconResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteLexiconResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tts.grpc_api.DeleteLexiconResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteLexiconResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteLexiconResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tts.grpc_api.DeleteLexiconResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tts.grpc_api.DeleteLexiconResponse)
    MergeFrom(*source);
  }
}

void DeleteLexiconResponse::MergeFrom(const DeleteLexiconResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tts.grpc_api.DeleteLexiconResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteLexiconResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tts.grpc_api.DeleteLexiconResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteLexiconResponse::CopyFrom(const DeleteLexiconResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tts.grpc_api.DeleteLexiconResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteLexiconResponse::IsInitialized() const {
  return true;
}

void DeleteLexiconResponse::InternalSwap(DeleteLexiconResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteLexiconResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLexiconRequest::InitAsDefaultInstance() {
}
class GetLexiconRequest::_Internal {
 public:
};

GetLexiconRequest::GetLexiconRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tts.grpc_api.GetLexiconRequest)
}
GetLexiconRequest::GetLexiconRequest(const GetLexiconRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:techmo.tts.grpc_api.GetLexiconRequest)
}

void GetLexiconRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLexiconRequest_techmo_5ftts_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetLexiconRequest::~GetLexiconRequest() {
  // @@protoc_insertion_point(destructor:techmo.tts.grpc_api.GetLexiconRequest)
  SharedDtor();
}

void GetLexiconRequest::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetLexiconRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLexiconRequest& GetLexiconRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLexiconRequest_techmo_5ftts_2eproto.base);
  return *internal_default_instance();
}


void GetLexiconRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tts.grpc_api.GetLexiconRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetLexiconRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "techmo.tts.grpc_api.GetLexiconRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLexiconRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tts.grpc_api.GetLexiconRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tts.grpc_api.GetLexiconRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tts.grpc_api.GetLexiconRequest)
  return target;
}

size_t GetLexiconRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tts.grpc_api.GetLexiconRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLexiconRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tts.grpc_api.GetLexiconRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLexiconRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLexiconRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tts.grpc_api.GetLexiconRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tts.grpc_api.GetLexiconRequest)
    MergeFrom(*source);
  }
}

void GetLexiconRequest::MergeFrom(const GetLexiconRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tts.grpc_api.GetLexiconRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void GetLexiconRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tts.grpc_api.GetLexiconRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLexiconRequest::CopyFrom(const GetLexiconRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tts.grpc_api.GetLexiconRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLexiconRequest::IsInitialized() const {
  return true;
}

void GetLexiconRequest::InternalSwap(GetLexiconRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLexiconRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLexiconResponse::InitAsDefaultInstance() {
}
class GetLexiconResponse::_Internal {
 public:
};

GetLexiconResponse::GetLexiconResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tts.grpc_api.GetLexiconResponse)
}
GetLexiconResponse::GetLexiconResponse(const GetLexiconResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:techmo.tts.grpc_api.GetLexiconResponse)
}

void GetLexiconResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLexiconResponse_techmo_5ftts_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetLexiconResponse::~GetLexiconResponse() {
  // @@protoc_insertion_point(destructor:techmo.tts.grpc_api.GetLexiconResponse)
  SharedDtor();
}

void GetLexiconResponse::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetLexiconResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLexiconResponse& GetLexiconResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLexiconResponse_techmo_5ftts_2eproto.base);
  return *internal_default_instance();
}


void GetLexiconResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tts.grpc_api.GetLexiconResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetLexiconResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "techmo.tts.grpc_api.GetLexiconResponse.content"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLexiconResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tts.grpc_api.GetLexiconResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tts.grpc_api.GetLexiconResponse.content");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tts.grpc_api.GetLexiconResponse)
  return target;
}

size_t GetLexiconResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tts.grpc_api.GetLexiconResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLexiconResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tts.grpc_api.GetLexiconResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLexiconResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLexiconResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tts.grpc_api.GetLexiconResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tts.grpc_api.GetLexiconResponse)
    MergeFrom(*source);
  }
}

void GetLexiconResponse::MergeFrom(const GetLexiconResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tts.grpc_api.GetLexiconResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void GetLexiconResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tts.grpc_api.GetLexiconResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLexiconResponse::CopyFrom(const GetLexiconResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tts.grpc_api.GetLexiconResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLexiconResponse::IsInitialized() const {
  return true;
}

void GetLexiconResponse::InternalSwap(GetLexiconResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLexiconResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListLexiconsRequest::InitAsDefaultInstance() {
}
class ListLexiconsRequest::_Internal {
 public:
};

ListLexiconsRequest::ListLexiconsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tts.grpc_api.ListLexiconsRequest)
}
ListLexiconsRequest::ListLexiconsRequest(const ListLexiconsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language().empty()) {
    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
  // @@protoc_insertion_point(copy_constructor:techmo.tts.grpc_api.ListLexiconsRequest)
}

void ListLexiconsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListLexiconsRequest_techmo_5ftts_2eproto.base);
  language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListLexiconsRequest::~ListLexiconsRequest() {
  // @@protoc_insertion_point(destructor:techmo.tts.grpc_api.ListLexiconsRequest)
  SharedDtor();
}

void ListLexiconsRequest::SharedDtor() {
  language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListLexiconsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListLexiconsRequest& ListLexiconsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListLexiconsRequest_techmo_5ftts_2eproto.base);
  return *internal_default_instance();
}


void ListLexiconsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tts.grpc_api.ListLexiconsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ListLexiconsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_language();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "techmo.tts.grpc_api.ListLexiconsRequest.language"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListLexiconsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tts.grpc_api.ListLexiconsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language = 1;
  if (this->language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tts.grpc_api.ListLexiconsRequest.language");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tts.grpc_api.ListLexiconsRequest)
  return target;
}

size_t ListLexiconsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tts.grpc_api.ListLexiconsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string language = 1;
  if (this->language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListLexiconsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tts.grpc_api.ListLexiconsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListLexiconsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListLexiconsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tts.grpc_api.ListLexiconsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tts.grpc_api.ListLexiconsRequest)
    MergeFrom(*source);
  }
}

void ListLexiconsRequest::MergeFrom(const ListLexiconsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tts.grpc_api.ListLexiconsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.language().size() > 0) {

    language_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_);
  }
}

void ListLexiconsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tts.grpc_api.ListLexiconsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLexiconsRequest::CopyFrom(const ListLexiconsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tts.grpc_api.ListLexiconsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLexiconsRequest::IsInitialized() const {
  return true;
}

void ListLexiconsRequest::InternalSwap(ListLexiconsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  language_.Swap(&other->language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListLexiconsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListLexiconsResponse::InitAsDefaultInstance() {
}
class ListLexiconsResponse::_Internal {
 public:
};

ListLexiconsResponse::ListLexiconsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:techmo.tts.grpc_api.ListLexiconsResponse)
}
ListLexiconsResponse::ListLexiconsResponse(const ListLexiconsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      names_(from.names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:techmo.tts.grpc_api.ListLexiconsResponse)
}

void ListLexiconsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListLexiconsResponse_techmo_5ftts_2eproto.base);
}

ListLexiconsResponse::~ListLexiconsResponse() {
  // @@protoc_insertion_point(destructor:techmo.tts.grpc_api.ListLexiconsResponse)
  SharedDtor();
}

void ListLexiconsResponse::SharedDtor() {
}

void ListLexiconsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListLexiconsResponse& ListLexiconsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListLexiconsResponse_techmo_5ftts_2eproto.base);
  return *internal_default_instance();
}


void ListLexiconsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:techmo.tts.grpc_api.ListLexiconsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  _internal_metadata_.Clear();
}

const char* ListLexiconsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "techmo.tts.grpc_api.ListLexiconsResponse.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListLexiconsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:techmo.tts.grpc_api.ListLexiconsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1;
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "techmo.tts.grpc_api.ListLexiconsResponse.names");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:techmo.tts.grpc_api.ListLexiconsResponse)
  return target;
}

size_t ListLexiconsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:techmo.tts.grpc_api.ListLexiconsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListLexiconsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:techmo.tts.grpc_api.ListLexiconsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListLexiconsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListLexiconsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:techmo.tts.grpc_api.ListLexiconsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:techmo.tts.grpc_api.ListLexiconsResponse)
    MergeFrom(*source);
  }
}

void ListLexiconsResponse::MergeFrom(const ListLexiconsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:techmo.tts.grpc_api.ListLexiconsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
}

void ListLexiconsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:techmo.tts.grpc_api.ListLexiconsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLexiconsResponse::CopyFrom(const ListLexiconsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:techmo.tts.grpc_api.ListLexiconsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLexiconsResponse::IsInitialized() const {
  return true;
}

void ListLexiconsResponse::InternalSwap(ListLexiconsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListLexiconsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace grpc_api
}  // namespace tts
}  // namespace techmo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::techmo::tts::grpc_api::ListVoicesRequest* Arena::CreateMaybeMessage< ::techmo::tts::grpc_api::ListVoicesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tts::grpc_api::ListVoicesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tts::grpc_api::ListVoicesResponse* Arena::CreateMaybeMessage< ::techmo::tts::grpc_api::ListVoicesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tts::grpc_api::ListVoicesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tts::grpc_api::SynthesizeRequest* Arena::CreateMaybeMessage< ::techmo::tts::grpc_api::SynthesizeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tts::grpc_api::SynthesizeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tts::grpc_api::SynthesizeConfig* Arena::CreateMaybeMessage< ::techmo::tts::grpc_api::SynthesizeConfig >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tts::grpc_api::SynthesizeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tts::grpc_api::AudioConfig* Arena::CreateMaybeMessage< ::techmo::tts::grpc_api::AudioConfig >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tts::grpc_api::AudioConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tts::grpc_api::Voice* Arena::CreateMaybeMessage< ::techmo::tts::grpc_api::Voice >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tts::grpc_api::Voice >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tts::grpc_api::VoiceInfo* Arena::CreateMaybeMessage< ::techmo::tts::grpc_api::VoiceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tts::grpc_api::VoiceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tts::grpc_api::SynthesizeResponse* Arena::CreateMaybeMessage< ::techmo::tts::grpc_api::SynthesizeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tts::grpc_api::SynthesizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tts::grpc_api::AudioData* Arena::CreateMaybeMessage< ::techmo::tts::grpc_api::AudioData >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tts::grpc_api::AudioData >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tts::grpc_api::PutLexiconRequest* Arena::CreateMaybeMessage< ::techmo::tts::grpc_api::PutLexiconRequest >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tts::grpc_api::PutLexiconRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tts::grpc_api::PutLexiconResponse* Arena::CreateMaybeMessage< ::techmo::tts::grpc_api::PutLexiconResponse >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tts::grpc_api::PutLexiconResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tts::grpc_api::DeleteLexiconRequest* Arena::CreateMaybeMessage< ::techmo::tts::grpc_api::DeleteLexiconRequest >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tts::grpc_api::DeleteLexiconRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tts::grpc_api::DeleteLexiconResponse* Arena::CreateMaybeMessage< ::techmo::tts::grpc_api::DeleteLexiconResponse >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tts::grpc_api::DeleteLexiconResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tts::grpc_api::GetLexiconRequest* Arena::CreateMaybeMessage< ::techmo::tts::grpc_api::GetLexiconRequest >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tts::grpc_api::GetLexiconRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tts::grpc_api::GetLexiconResponse* Arena::CreateMaybeMessage< ::techmo::tts::grpc_api::GetLexiconResponse >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tts::grpc_api::GetLexiconResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tts::grpc_api::ListLexiconsRequest* Arena::CreateMaybeMessage< ::techmo::tts::grpc_api::ListLexiconsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tts::grpc_api::ListLexiconsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::techmo::tts::grpc_api::ListLexiconsResponse* Arena::CreateMaybeMessage< ::techmo::tts::grpc_api::ListLexiconsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::techmo::tts::grpc_api::ListLexiconsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
